<html>
<head>
	<title></title>
	<script type="text/javascript" src="js/jsondiffpatch.js"></script>
	<script type="text/javascript" src="js/sockjs-1.0.3.js"></script>
	<script type="text/javascript" src="js/jquery-1.11.3.js"></script>
	<script type="text/javascript" src="js/hash.js"></script>
	<script type="text/javascript" src="js/knockout-3.3.0.js"></script>
</head>
<body>
<button id="test">Send data</button>
<button id="testDelete">Send delete data</button>
<textarea id="log"></textarea>
<script>
var testData = {},
	sock = new SockJS('http://192.168.0.20:9999/dataPortal');

sock.onopen = function() {
	console.log('open');
};

sock.onmessage = function(e){
	var message = JSON.parse(e.data);
	console.log('message', message, message.type);
	if(message.type == "data") {
		testData = message.data;
	} else if(message.type == "diff") {
		//	Conditionally patch the data
		if(hash(testData) !== message.hash) {
			console.log("patch diff", message.diff);
			jsondiffpatch.patch(testData, message.diff);
		} else {
			console.log("hash already matches, no patch");
		}

		//	Update log
		$('#log').val(JSON.stringify(testData));

	}
};

sock.onclose = function() {
	console.log('close');
};

//	Click the test button to see the magic
$('#test').click(function(){
	//	Clone object and add something
	var newTestData = {};
	jsondiffpatch.patch(newTestData, jsondiffpatch.diff({}, testData));
	newTestData.c = {f:"minor"};
	var delta = jsondiffpatch.diff(testData, newTestData);
	//	Patch it, so only other clients need to patch
	testData = newTestData;
	//	Send it
	sock.send(JSON.stringify({
		diff: delta,
		hash: hash(newTestData)
	}));
});

//	Click the test button to see the magic
$('#testDelete').click(function(){
	//	Clone object and add something
	var newTestData = {};
	jsondiffpatch.patch(newTestData, jsondiffpatch.diff({}, testData));
	delete newTestData.c;
	var delta = jsondiffpatch.diff(testData, newTestData);
	//	Patch it, so only other clients need to patch
	testData = newTestData;
	//	Send it
	sock.send(JSON.stringify({
		diff: delta,
		hash: hash(newTestData)
	}));
});





var DataPortal = function(obj){
	var self = this,
		initialObject = 
		publish = function(name, object){
		};



};



</script>


<script>
/*
	## Ideal way to share data

	var myObject = {
			thisis: "an object"
		},
		myPortal = new DataPortal("myObject", myObject);


	//	Update myObject
	myObject.something = "a thing";

	//	Let the portal know
	myPortal.publish(myObject);


	## Abstracting it for knockout

	Based on: http://www.knockmeout.net/2011/05/creating-smart-dirty-flag-in-knockoutjs.html


ko.dataPortal = function(root, isInitiallyDirty) {
    var result = function() {},
        _initialState = ko.observable(ko.toJSON(root)),
        _isInitiallyDirty = ko.observable(isInitiallyDirty);

    result.isDirty = ko.computed(function() {
        return _isInitiallyDirty() || _initialState() !== ko.toJSON(root);
    });

    result.reset = function() {
        _initialState(ko.toJSON(root));
        _isInitiallyDirty(false);
    };

    return result;
};

*/
</script>


<ul data-bind="foreach: items">
    <li>
        <span data-bind="text: id"></span>
        <input data-bind="value: name" />
    </li>
</ul>

<script>

ko.dataPortal = function(root, isInitiallyDirty) {
    var result = function() {},
        _initialState = ko.observable(ko.toJSON(root)),
        _isInitiallyDirty = ko.observable(isInitiallyDirty);

    result.isDirty = ko.computed(function() {
        var isDirty = _isInitiallyDirty() || _initialState() !== ko.toJSON(root);
        if(isDirty) {
        	console.log(ko.toJSON(root), "is dirty");
        }
        return isDirty;
    });

    result.reset = function() {
        _initialState(ko.toJSON(root));
        _isInitiallyDirty(false);
    };

    return result;
};


function Item(id, name) {
    this.id = ko.observable(id);
    this.name = ko.observable(name);
}

var ViewModel = function(items) {
    this.items = ko.observableArray([
        new Item(1, "one"),
        new Item(2, "two"),
        new Item(3, "three")
    ]);
    
    //	Setup data portal functionality
    this.dataPortal = new ko.dataPortal(this);
};

ko.applyBindings(new ViewModel());

</script>



</body>
</html>