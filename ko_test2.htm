<html>
<head>
	<title></title>
	<script type="text/javascript" src="js/jsondiffpatch.js"></script>
	<script type="text/javascript" src="js/sockjs-1.0.3.js"></script>
	<script type="text/javascript" src="js/jquery-1.11.3.js"></script>
	<script type="text/javascript" src="js/hash.js"></script>
	<script type="text/javascript" src="js/knockout-3.3.0.js"></script>
	<script type="text/javascript" src="js/knockout.mapping-2.4.1.js"></script>
	<script src="js/dataportal.js?url=http://localhost:9999/dataPortal"></script>
</head>
<body>

<ul data-bind="foreach: items">
    <li>
        <span data-bind="text: id"></span>
        <input data-bind="value: name" />
    </li>
</ul>

<script>

/*

	Things learnt:

	* The KO mapping plugin won't work, as it wipes out custom stuff, such as isDirty
	* Right now, it seems the best options is to manually map it, ie: the creator of the view model provides a patch function. ick.


 */



//	Knockout dataportal integration
ko.dataPortal = function(root, isInitiallyDirty) {
    var result = function() {},
        initialState = ko.observable(ko.toJSON(root)),
        isInitiallyDirty = ko.observable(isInitiallyDirty),
        fromPatch = false,
        mp = dataPortal(root, "objtopic", {
        	onready: function(portal){
				//	Subscribe to and update our object
				portal.subscribe(function(value){
					//syncValue(value);
					//console.log('value updated', value);//JSON.stringify(value));
				});
			},
			onpatch: function(message){
				fromPatch = true;
				//console.log('patch');
				/* Any patching? */ 
				var myObj = JSON.parse(ko.toJSON(root));
				//	We do the patchign manually
				jsondiffpatch.patch(myObj, message.diff);




				//	Use the KO mapping plugin
				//	NOPE! This break the isDirty thingy.
				//ko.mapping.fromJS(myObj, {}, root);

				//	Reset so we don't think it's still dirty.
				//result.reset();


				console.log('patched', root.items()[1].name());
				fromPatch = false;
			}
		});



    result.isDirty = ko.computed(function() {
    	console.log("dirtybit");
    	if(!fromPatch) {
	        var isDirty = isInitiallyDirty() || initialState() !== ko.toJSON(root);
	        if(isDirty) {
	        	console.log("is dirty");

	        	//	Send it.
	        	mp.publish(JSON.parse(ko.toJSON(root)));

	        }
	        return isDirty;
        } else {
        	//fromPatch = false
        	console.log("don't publish");
        	return false;
        }
    });

    result.reset = function() {
        initialState(ko.toJSON(root));
        isInitiallyDirty(false);
    };

    return result;
};


function Item(id, name) {
    this.id = ko.observable(id);
    this.name = ko.observable(name);
}

var ViewModel = function(items) {
    this.items = ko.observableArray([
        new Item(1, "one"),
        new Item(2, "two"),
        new Item(3, "three")
    ]);
    
    //	Setup data portal functionality
    this.dataPortal = new ko.dataPortal(this);
},vm = new ViewModel();

//	TESTING
//vm = ko.mapping.fromJS({"items":[{"id":1,"name":"one"},{"id":2,"name":"tworrr"},{"id":3,"name":"three"}]});

vm.dataPortal = new ko.dataPortal(vm);


ko.applyBindings(vm);

</script>



</body>
</html>